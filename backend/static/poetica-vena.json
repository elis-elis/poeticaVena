{
	"swagger": "2.0",
    "info": {
        "title": "poeticaVENA API",
        "version": "1.0.0"
    },
    "servers": [{ "url": "http://localhost:5000" }],
    "schemes": ["http"],
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "üç≠ Enter your bearer token in the format **Bearer <token>**"
        }
    },
    "paths": {
        "/auth/register": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Registers a new poet(esse). ü¶ï",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "poet data",
                        "in": "body",
                        "description": "JSON poet data for the api",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PoetRegister"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Poet(esse) registered successfully üåª",
                        "schema": {
                            "$ref": "#/definitions/PoetResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. Email already exists. ‚òîÔ∏è"
                    },
                    "400": {
                        "description": "Bad request. Validation failed. ‚ö°Ô∏è"
                    },
                    "500": {
                        "description": "Internal server error. ü¶´"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Logs in the poet(esse). ü¶©",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "poet data",
                        "in": "body",
                        "description": "JSON poet data for the api",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PoetLogIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Very much successful operation üç∑",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "access_token": {
                                    "type": "string",
                                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                                },
                                "token_type": {
                                    "type": "string",
                                    "example": "bearer"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "ü¶à Unauthorized. Invalid email or password."
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Logs out the poet(esse). üêø",
                "responses": {
                    "200": {
                        "description": "Logged out successfully. üßÅ See you later."
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Refreshes the access token. üêâ",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access token generated üåà",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "access_token": {
                                    "type": "string",
                                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "üå§ Unauthorized. Invalid or expired refresh token."
                    }
                }
            }
        },
        "/": {
            "get": {
                "tags": ["Home"],
                "summary": "Entry point for authenticated poets. üåó",
                "description": "Returns a welcoming message for authenticated poets.",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Welcoming message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "You are (almost) welcomed here, dear poet(esse) with ID 1. üç∏"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid or missing Bearer token. ü•ú"
                    }
                }
            }
        },
        "/poet/me": {
            "get": {
                "tags": ["Poets"],
                "summary": "Get profile of the logged-in poet(esse). üçÄ",
                "produces": ["application/json"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile of the logged-in poet(esse)",
                        "schema": {
                            "$ref": "#/definitions/PoetResponse"
                        }
                    },
                    "400": {
                        "description": "Unauthorized. Invalid or missing Bearer token. üé±"
                    },
                    "404": {
                        "description": "Poet not found. üõº"
                    }
                }
            }
        },
        "/poet/{identifier}": {
            "get": {
                "tags": ["Poets"],
                "summary": "Get by ID or name. üåª",
                "description": "Retrieves information of a specific poet(esse) using an identifier, which can be either a poet_id (integer) or a poet_name (string).",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "Identifier of the poet, can be either a poet_id (e.g., '11') or poet_name (e.g., 'elis').",
                        "example": "11"
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the requested poet(esse)",
                        "schema": {
                            "$ref": "#/definitions/PoetResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid or missing Bearer token. üçå"
                    },
                    "404": {
                        "description": "Poet(esse) not found, but keep looking. ü•ê"
                    },
                    "500": {
                        "description": "Internal server error. üçú"
                    }
                }
            }
        },
        "/poets": {
            "get": {
                "tags": ["Poets"],
                "summary": "Returns all poets. ü™¥",
                "produces": ["application/json"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ahh once again a successful operation üçÑ",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "page": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "per_page": {
                                    "type": "integer",
                                    "example": 8
                                },
                                "poets": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/PoetResponse"
                                    }
                                },
                                "total": {
                                    "type": "integer",
                                    "example": 10
                                },
                                "total_pages": {
                                    "type": "integer",
                                    "example": 2
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "üåΩ Unauthorized. Invalid or missing Bearer token."
                    }
                }
            }
        },
        "/poem/{poem_id}": {
            "get": {
                "tags": ["Poems"],
                "summary": "Get poem by ID. üé∞",
                "description": "Retrieves details of a specific poem along with its contributions using the poem ID.",
                "parameters": [
                    {
                        "name": "poem_id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "ID of the poem to retrieve",
                        "example": 5
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the requested poem",
                        "schema": {
                            "$ref": "#/definitions/PoemResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid or missing Bearer token. üçå"
                    },
                    "404": {
                        "description": "Poem not found üåõ"
                    },
                    "500": {
                        "description": "Internal server error. ü™∞"
                    }
                }
            }
        },
        "/all-poems": {
            "get": {
                "tags": ["Poems"],
                "summary": "Get all poems with optional filters. üèá",
                "description": "Retrieve a list of poems with optional filtering based on collaborative status, poem type, poet, title, and pagination.",
                "parameters": [
                    {
                        "name": "is_collaborative",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": ["true", "false"],
                        "description": "Filter poems by collaborative status. `true` for active collaborative (not published yet), `false` for non-collaborative, and omitted for all published poems."
                    },
                    {
                        "name": "poem_type_id",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by poem type ID",
                        "example": 5
                    },
                    {
                        "name": "poet_id",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by the ID of the poet",
                        "example": 7
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "type": "string",
                        "description": "Search poems by title (partial match)",
                        "example": "untitled about your feelings"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "example": 1
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "type": "integer",
                        "description": "Number of poems per page for pagination",
                        "default": 5,
                        "example": 8
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of poems based on the applied filters.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "total": {
                                    "type": "integer",
                                    "example": 150,
                                    "description": "Total number of poems found based on the applied filters."
                                },
                                "page": {
                                    "type": "integer",
                                    "example": 1,
                                    "description": "Current page number."
                                },
                                "per_page": {
                                    "type": "integer",
                                    "example": 10,
                                    "description": "Number of poems per page."
                                },
                                "total_pages": {
                                    "type": "integer",
                                    "example": 15,
                                    "description": "Total number of pages available."
                                },
                                "poems": {
                                    "type": "array",
                                    "description": "List of poems matching the filter criteria.",
                                    "items": {
                                        "$ref": "#/definitions/PoemResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid or missing Bearer token. ü¶á"
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error occurred. ü•û"
                    }
                }
            }
        },
        "/poem-types": {
            "get": {
                "tags": ["Poem Types"],
                "summary": "Get all poem types",
                "description": "Fetch all available poem types and return them as a list of JSON objects.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "List of all poem types.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PoemTypeResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "üê© Internal server error. An unexpected error occurred."
                    }
                }
            }
        }
    },
    "definitions": {
        "PoetLogIn": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "elis@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "1234567890"
                }
            }
        },
        "PoetRegister": {
            "type": "object",
            "properties": {
                "poet_name": {
                    "type": "string",
                    "example": "Elis Something"
                },
                "email": {
                    "type": "string",
                    "example": "elis@gmail.com"
                },
                "password_hash": {
                    "type": "string",
                    "example": "1234567890"
                }
            },
            "required": ["poet_name", "email", "password_hash"]
        },
        "PoetResponse": {
            "type": "object",
                "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "poet_name": {
                    "type": "string",
                    "example": "Elis Something"
                },
                "email": {
                    "type": "string",
                    "example": "elis@gmail.com"
                },
                "created_at": {
                    "type": "string",
                    "example": "Tue, 08 Oct 2024 08:19:59 GMT"
                }
            }
        },
        "PoemResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 67
                },
                "title": {
                    "type": "string",
                    "example": "oh, please, not again"
                },
                "poet_id": {
                    "type": "integer",
                    "example": 7,
                    "description": "The ID of the poet who initiated the poem"
                },
                "poem_type_id": {
                    "type": "integer",
                    "example": 5,
                    "description": "The type/category ID of the poem"
                },
                "is_collaborative": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates if the poem is a collaborative effort"
                },
                "is_published": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates if the poem has been published"
                },
                "created_at": {
                    "type": "string",
                    "example": "Sat, 09 Nov 2024 11:22:00 GMT",
                    "description": "The creation timestamp of the poem"
                },
                "updated_at": {
                    "type": "string",
                    "example": "Sat, 09 Nov 2024 12:25:39 GMT",
                    "description": "The last updated timestamp of the poem"
                },
                "details": {
                    "type": "array",
                    "description": "List of contributions to the poem",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 146,
                                "description": "The ID of the poem contribution"
                            },
                            "poem_id": {
                                "type": "integer",
                                "example": 67,
                                "description": "The ID of the parent poem"
                            },
                            "poet_id": {
                                "type": "integer",
                                "example": 7,
                                "description": "The ID of the contributing poet"
                            },
                            "content": {
                                "type": "string",
                                "example": "just waiting for the call",
                                "description": "The text content of the contribution"
                            },
                            "publish": {
                                "type": "boolean",
                                "example": false,
                                "description": "Indicates if this contribution is published"
                            },
                            "submitted_at": {
                                "type": "string",
                                "example": "Sat, 09 Nov 2024 12:07:57 GMT",
                                "description": "The timestamp when this contribution was submitted"
                            }
                        }
                    }
                }
            }
        },
        "PoemTypeResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1,
                    "description": "The unique identifier for the poem type."
                },
                "name": {
                    "type": "string",
                    "example": "Haiku",
                    "description": "The name of the poem type."
                },
                "description": {
                    "type": "string",
                    "example": "A traditional form of Japanese poetry with a 5-7-5 syllable structure.",
                    "description": "A brief description of the poem type."
                }
            }
        } 
    }
}

