{
	"swagger": "2.0",
    "info": {
        "title": "Poetica Vena API",
        "version": "1.0.0"
    },
    "servers": [{ "url": "http://localhost:5000" }],
    "schemes": ["http"],
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "üç≠ Enter your bearer token in the format **Bearer <token>**"
        }
    },
    "paths": {
        "/auth/register": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Registers a new poet(esse)",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "poet data",
                        "in": "body",
                        "description": "JSON poet data for the api",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PoetRegister"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Poet(esse) registered successfully üåª",
                        "schema": {
                            "$ref": "#/definitions/PoetResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. Email already exists. ‚òîÔ∏è"
                    },
                    "400": {
                        "description": "Bad request. Validation failed. ‚ö°Ô∏è"
                    },
                    "500": {
                        "description": "Internal server error. ü¶´"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Logs in the poet(esse)",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "poet data",
                        "in": "body",
                        "description": "JSON poet data for the api",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PoetLogIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Very much successful operation üç∑",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "access_token": {
                                    "type": "string",
                                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                                },
                                "token_type": {
                                    "type": "string",
                                    "example": "bearer"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "ü¶à Unauthorized. Invalid email or password."
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Logs out the poet(esse)",
                "responses": {
                    "200": {
                        "description": "Logged out successfully. üßÅ See you later."
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Refreshes the access token",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access token generated",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "access_token": {
                                    "type": "string",
                                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid or expired refresh token."
                    }
                }
            }
        },
        "/poet/me": {
            "get": {
                "tags": ["Poets"],
                "summary": "Get profile of the logged-in poet",
                "produces": ["application/json"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile of the logged-in poet",
                        "schema": {
                            "$ref": "#/definitions/PoetResponse"
                        }
                    },
                    "400": {
                        "description": "Unauthorized. Invalid or missing Bearer token."
                    },
                    "404": {
                        "description": "Poet not found."
                    }
                }
            }
        },
        "/poet/{poet_id}": {
            "get": {
                "tags": ["Poets"],
                "summary": "Get poet by ID",
                "description": "Retrieves information of a specific poet(esse) by poet_id.",
                "parameters": [
                    {
                        "name": "poet_id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "ID of the poet to retrieve",
                        "example": 1
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the requested poet",
                        "schema": {
                            "$ref": "#/definitions/PoetResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Invalid or missing Bearer token."
                    },
                    "404": {
                        "description": "Poet not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/poets": {
            "get": {
                "tags": ["Poets"],
                "summary": "Returns all poets",
                "produces": ["application/json"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ahh once again a successful operation üçÑ",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "page": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "per_page": {
                                    "type": "integer",
                                    "example": 8
                                },
                                "poets": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/PoetResponse"
                                    }
                                },
                                "total": {
                                    "type": "integer",
                                    "example": 10
                                },
                                "total_pages": {
                                    "type": "integer",
                                    "example": 2
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "üåΩ Unauthorized. Invalid or missing Bearer token."
                    }
                }
            }
        }
    },
    "definitions": {
        "PoetLogIn": {
            "type": "object",
            "properties": {
                "email": {
                "type": "string",
                "example": "elis@gmail.com"
                },
                "password": {
                "type": "string",
                "example": "1234567890"
                }
            }
        },
        "PoetRegister": {
            "type": "object",
            "properties": {
                "poet_name": {
                    "type": "string",
                    "example": "Elis Something"
                },
                "email": {
                    "type": "string",
                    "example": "elis@gmail.com"
                },
                "password_hash": {
                    "type": "string",
                    "example": "1234567890"
                }
            },
            "required": ["poet_name", "email", "password_hash"]
        },
        "PoetResponse": {
            "type": "object",
                "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "poet_name": {
                    "type": "string",
                    "example": "Elis Something"
                },
                "email": {
                    "type": "string",
                    "example": "elis@gmail.com"
                },
                "created_at": {
                    "type": "string",
                    "example": "Tue, 08 Oct 2024 08:19:59 GMT"
                }
            }
        }
    }
}
